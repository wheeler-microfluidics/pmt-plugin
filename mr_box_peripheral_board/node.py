
# ############################################################################
# [2017-08-28 21:07:11.028000] THIS FILE IS AUTOGENERATED - DO NOT EDIT!
# ############################################################################
import types
import pandas as pd
import numpy as np
from nadamq.NadaMq import cPacket, PACKET_TYPES
from arduino_rpc.proxy import ProxyBase
try:
    from google.protobuf.message import Message
    _translate = (lambda arg: arg.SerializeToString()
                  if isinstance(arg, Message) else arg)
except ImportError:
    _translate = lambda arg: arg



from base_node_rpc.proxy import ProxyBase, I2cProxyMixin, SerialProxyMixin



class Proxy(ProxyBase):


    _CMD_BASE_NODE_SOFTWARE_VERSION = 0x00
    _CMD_PACKAGE_NAME = 0x01
    _CMD_DISPLAY_NAME = 0x02
    _CMD_MANUFACTURER = 0x03
    _CMD_SOFTWARE_VERSION = 0x04
    _CMD_URL = 0x05
    _CMD_MICROSECONDS = 0x06
    _CMD_MILLISECONDS = 0x07
    _CMD_DELAY_US = 0x08
    _CMD_DELAY_MS = 0x09
    _CMD_RAM_FREE = 0x0a
    _CMD_PIN_MODE = 0x0b
    _CMD_DIGITAL_READ = 0x0c
    _CMD_DIGITAL_WRITE = 0x0d
    _CMD_ANALOG_READ = 0x0e
    _CMD_ANALOG_WRITE = 0x0f
    _CMD_ARRAY_LENGTH = 0x10
    _CMD_ECHO_ARRAY = 0x11
    _CMD_STR_ECHO = 0x12
    _CMD_MAX_SERIAL_PAYLOAD_SIZE = 0xff
    _CMD_UPDATE_EEPROM_BLOCK = 0x1fe
    _CMD_READ_EEPROM_BLOCK = 0x1ff
    _CMD_EEPROM_E2END = 0x200
    _CMD_LOAD_CONFIG = 0x2fd
    _CMD_SAVE_CONFIG = 0x2fe
    _CMD_RESET_CONFIG = 0x2ff
    _CMD_SERIALIZE_CONFIG = 0x300
    _CMD_UPDATE_CONFIG = 0x301
    _CMD_ON_CONFIG_I2C_ADDRESS_CHANGED = 0x302
    _CMD_PMT_BEGIN = 0x3fc
    _CMD_PMT_REFERENCE_VOLTAGE = 0x3fd
    _CMD_PMT_SET_POT = 0x3fe
    _CMD_PMT_OPEN_SHUTTER = 0x3ff
    _CMD_PMT_CLOSE_SHUTTER = 0x400
    _CMD_PUMP_FREQUENCY_CONFIGURE = 0x4fb
    _CMD_PUMP_FREQUENCY_SET = 0x4fc
    _CMD_PUMP_FREQUENCY_RESET = 0x4fd
    _CMD_PUMP_UPDATE = 0x4fe
    _CMD_PUMP_ACTIVATE = 0x4ff
    _CMD_PUMP_DEACTIVATE = 0x500
    _CMD__ZSTAGE_RESET = 0x5fa
    _CMD__ZSTAGE_HOME = 0x5fb
    _CMD__ZSTAGE_MOVE_TO = 0x5fc
    _CMD__ZSTAGE_MOVE = 0x5fd
    _CMD__ZSTAGE_SET_POSITION = 0x5fe
    _CMD__ZSTAGE_SET_RPM = 0x5ff
    _CMD__ZSTAGE_ENABLE_MOTOR = 0x600
    _CMD__ZSTAGE_DISABLE_MOTOR = 0x601
    _CMD__ZSTAGE_ENABLE_MICRO_STEPPING = 0x602
    _CMD__ZSTAGE_DISABLE_MICRO_STEPPING = 0x603
    _CMD__ZSTAGE_ENABLE_ENGAGED_STOP = 0x604
    _CMD__ZSTAGE_DISABLE_ENGAGED_STOP = 0x605
    _CMD__ZSTAGE_ENABLE_HOME_STOP = 0x606
    _CMD__ZSTAGE_DISABLE_HOME_STOP = 0x607
    _CMD__ZSTAGE_POSITION = 0x608
    _CMD__ZSTAGE_MOTOR_ENABLED = 0x609
    _CMD__ZSTAGE_MICRO_STEPPING = 0x60a
    _CMD__ZSTAGE_RPM = 0x60b
    _CMD__ZSTAGE_HOME_STOP_ENABLED = 0x60c
    _CMD__ZSTAGE_ENGAGED_STOP_ENABLED = 0x60d
    _CMD__ZSTAGE_AT_HOME = 0x60e
    _CMD__ZSTAGE_ENGAGED = 0x60f
    _CMD_MAX11210_BEGIN = 0x6f9
    _CMD_MAX11210_END = 0x6fa
    _CMD_MAX11210_SELFCAL = 0x6fb
    _CMD_MAX11210_SYSOFFSETCAL = 0x6fc
    _CMD_MAX11210_SYSGAINCAL = 0x6fd
    _CMD_MAX11210_SETRATE = 0x6fe
    _CMD_MAX11210_READREG8 = 0x6ff
    _CMD_MAX11210_READREG24 = 0x700
    _CMD_MAX11210_WRITEREG8 = 0x701
    _CMD_MAX11210_WRITEREG24 = 0x702
    _CMD_MAX11210_SEND_COMMAND = 0x703
    _CMD_MAX11210_GETDATA = 0x704
    _CMD_MAX11210_GETSTAT1 = 0x705
    _CMD_MAX11210_GETCTRL1 = 0x706
    _CMD_MAX11210_GETCTRL2 = 0x707
    _CMD_MAX11210_GETCTRL3 = 0x708
    _CMD_MAX11210_SETDEFAULT = 0x709
    _CMD_MAX11210_SETLINEFREQ = 0x70a
    _CMD_MAX11210_SETINPUTRANGE = 0x70b
    _CMD_MAX11210_SETCLOCKSOURCE = 0x70c
    _CMD_MAX11210_SETENABLEREFBUF = 0x70d
    _CMD_MAX11210_SETENABLESIGBUF = 0x70e
    _CMD_MAX11210_SETFORMAT = 0x70f
    _CMD_MAX11210_SETCONVMODE = 0x710
    _CMD_MAX11210_PINMODEGPIO = 0x711
    _CMD_MAX11210_DIGITALWRITEGPIO = 0x712
    _CMD_MAX11210_DIGITALREADGPIO = 0x713
    _CMD_MAX11210_SETGAIN = 0x714
    _CMD_MAX11210_SETDISABLESYSGAIN = 0x715
    _CMD_MAX11210_SETDISABLESYSOFFSET = 0x716
    _CMD_MAX11210_SETDISABLESELFCALGAIN = 0x717
    _CMD_MAX11210_SETDISABLESELFCALOFFSET = 0x718
    _CMD_MAX11210_GETSYSGAINCAL = 0x719
    _CMD_MAX11210_GETSYSOFFSETCAL = 0x71a
    _CMD_MAX11210_GETSELFCALGAIN = 0x71b
    _CMD_MAX11210_GETSELFCALOFFSET = 0x71c
    _CMD_MAX11210_SETSYSGAINCAL = 0x71d
    _CMD_MAX11210_SETSYSOFFSETCAL = 0x71e
    _CMD_MAX11210_SETSELFCALGAIN = 0x71f
    _CMD_MAX11210_SETSELFCALOFFSET = 0x720
    _CMD_GET_BUFFER = 0x7f8
    _CMD_BEGIN = 0x7f9
    _CMD_HARDWARE_VERSION = 0x7fa
    _CMD_SET_ID = 0x7fb
    _CMD_ON_TICK = 0x7fc
    _CMD_LOOP = 0x7fd
    _CMD_ANALOG_INPUT_TO_DIGITAL_PIN = 0x7fe
    _CMD_DIGITAL_PIN_HAS_PWM = 0x7ff
    _CMD_DIGITAL_PIN_TO_INTERRUPT = 0x800
    MAX_COMMAND_CODE = 2048


    def base_node_software_version(self):
        command = np.dtype('uint16').type(self._CMD_BASE_NODE_SOFTWARE_VERSION)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def package_name(self):
        command = np.dtype('uint16').type(self._CMD_PACKAGE_NAME)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def display_name(self):
        command = np.dtype('uint16').type(self._CMD_DISPLAY_NAME)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def manufacturer(self):
        command = np.dtype('uint16').type(self._CMD_MANUFACTURER)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def software_version(self):
        command = np.dtype('uint16').type(self._CMD_SOFTWARE_VERSION)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def url(self):
        command = np.dtype('uint16').type(self._CMD_URL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def microseconds(self):
        command = np.dtype('uint16').type(self._CMD_MICROSECONDS)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def milliseconds(self):
        command = np.dtype('uint16').type(self._CMD_MILLISECONDS)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def delay_us(self, us):
        command = np.dtype('uint16').type(self._CMD_DELAY_US)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(us, )],
                               dtype=[('us', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def delay_ms(self, ms):
        command = np.dtype('uint16').type(self._CMD_DELAY_MS)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(ms, )],
                               dtype=[('ms', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def ram_free(self):
        command = np.dtype('uint16').type(self._CMD_RAM_FREE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def pin_mode(self, pin, mode):
        command = np.dtype('uint16').type(self._CMD_PIN_MODE)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, mode, )],
                               dtype=[('pin', 'uint8'), ('mode', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def digital_read(self, pin):
        command = np.dtype('uint16').type(self._CMD_DIGITAL_READ)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def digital_write(self, pin, value):
        command = np.dtype('uint16').type(self._CMD_DIGITAL_WRITE)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, value, )],
                               dtype=[('pin', 'uint8'), ('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def analog_read(self, pin):
        command = np.dtype('uint16').type(self._CMD_ANALOG_READ)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint16')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def analog_write(self, pin, value):
        command = np.dtype('uint16').type(self._CMD_ANALOG_WRITE)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, value, )],
                               dtype=[('pin', 'uint8'), ('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def array_length(self, array):
        command = np.dtype('uint16').type(self._CMD_ARRAY_LENGTH)
        ARG_STRUCT_SIZE = 6

        array = _translate(array)
        if isinstance(array, str):
            array = map(ord, array)
        # Argument is an array, so cast to appropriate array type.
        array = np.ascontiguousarray(array, dtype='uint8')
        array_info = pd.DataFrame([array.shape[0], ],
                                  index=['array', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([array.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(array_info.length['array'], ARG_STRUCT_SIZE + array_info.start['array'], )],
                               dtype=[('array_length', 'uint32'), ('array_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint16')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def echo_array(self, array):
        command = np.dtype('uint16').type(self._CMD_ECHO_ARRAY)
        ARG_STRUCT_SIZE = 6

        array = _translate(array)
        if isinstance(array, str):
            array = map(ord, array)
        # Argument is an array, so cast to appropriate array type.
        array = np.ascontiguousarray(array, dtype='uint32')
        array_info = pd.DataFrame([array.shape[0], ],
                                  index=['array', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([array.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(array_info.length['array'], ARG_STRUCT_SIZE + array_info.start['array'], )],
                               dtype=[('array_length', 'uint32'), ('array_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is an array, so return entire array.
        return result


    def str_echo(self, msg):
        command = np.dtype('uint16').type(self._CMD_STR_ECHO)
        ARG_STRUCT_SIZE = 6

        msg = _translate(msg)
        if isinstance(msg, str):
            msg = map(ord, msg)
        # Argument is an array, so cast to appropriate array type.
        msg = np.ascontiguousarray(msg, dtype='uint8')
        array_info = pd.DataFrame([msg.shape[0], ],
                                  index=['msg', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([msg.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(array_info.length['msg'], ARG_STRUCT_SIZE + array_info.start['msg'], )],
                               dtype=[('msg_length', 'uint32'), ('msg_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def max_serial_payload_size(self):
        command = np.dtype('uint16').type(self._CMD_MAX_SERIAL_PAYLOAD_SIZE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='int32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def update_eeprom_block(self, address, data):
        command = np.dtype('uint16').type(self._CMD_UPDATE_EEPROM_BLOCK)
        ARG_STRUCT_SIZE = 10

        data = _translate(data)
        if isinstance(data, str):
            data = map(ord, data)
        # Argument is an array, so cast to appropriate array type.
        data = np.ascontiguousarray(data, dtype='uint8')
        array_info = pd.DataFrame([data.shape[0], ],
                                  index=['data', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([data.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(address, array_info.length['data'], ARG_STRUCT_SIZE + array_info.start['data'], )],
                               dtype=[('address', 'uint32'), ('data_length', 'uint32'), ('data_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def read_eeprom_block(self, address, n):
        command = np.dtype('uint16').type(self._CMD_READ_EEPROM_BLOCK)
        ARG_STRUCT_SIZE = 6
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(address, n, )],
                               dtype=[('address', 'uint32'), ('n', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def eeprom_e2end(self):
        command = np.dtype('uint16').type(self._CMD_EEPROM_E2END)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def load_config(self):
        command = np.dtype('uint16').type(self._CMD_LOAD_CONFIG)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def save_config(self):
        command = np.dtype('uint16').type(self._CMD_SAVE_CONFIG)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def reset_config(self):
        command = np.dtype('uint16').type(self._CMD_RESET_CONFIG)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def serialize_config(self):
        command = np.dtype('uint16').type(self._CMD_SERIALIZE_CONFIG)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def update_config(self, serialized):
        command = np.dtype('uint16').type(self._CMD_UPDATE_CONFIG)
        ARG_STRUCT_SIZE = 6

        serialized = _translate(serialized)
        if isinstance(serialized, str):
            serialized = map(ord, serialized)
        # Argument is an array, so cast to appropriate array type.
        serialized = np.ascontiguousarray(serialized, dtype='uint8')
        array_info = pd.DataFrame([serialized.shape[0], ],
                                  index=['serialized', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([serialized.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(array_info.length['serialized'], ARG_STRUCT_SIZE + array_info.start['serialized'], )],
                               dtype=[('serialized_length', 'uint32'), ('serialized_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def on_config_i2c_address_changed(self, new_value):
        command = np.dtype('uint16').type(self._CMD_ON_CONFIG_I2C_ADDRESS_CHANGED)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(new_value, )],
                               dtype=[('new_value', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def PMT_begin(self):
        command = np.dtype('uint16').type(self._CMD_PMT_BEGIN)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pmt_reference_voltage(self):
        command = np.dtype('uint16').type(self._CMD_PMT_REFERENCE_VOLTAGE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='float32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def pmt_set_pot(self, value):
        command = np.dtype('uint16').type(self._CMD_PMT_SET_POT)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='float32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def pmt_open_shutter(self):
        command = np.dtype('uint16').type(self._CMD_PMT_OPEN_SHUTTER)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pmt_close_shutter(self):
        command = np.dtype('uint16').type(self._CMD_PMT_CLOSE_SHUTTER)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_frequency_configure(self, duty_cycle, period_us):
        command = np.dtype('uint16').type(self._CMD_PUMP_FREQUENCY_CONFIGURE)
        ARG_STRUCT_SIZE = 5
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(duty_cycle, period_us, )],
                               dtype=[('duty_cycle', 'uint8'), ('period_us', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_frequency_set(self, frequency_hz):
        command = np.dtype('uint16').type(self._CMD_PUMP_FREQUENCY_SET)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(frequency_hz, )],
                               dtype=[('frequency_hz', 'float32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_frequency_reset(self):
        command = np.dtype('uint16').type(self._CMD_PUMP_FREQUENCY_RESET)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_update(self):
        command = np.dtype('uint16').type(self._CMD_PUMP_UPDATE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_activate(self):
        command = np.dtype('uint16').type(self._CMD_PUMP_ACTIVATE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def pump_deactivate(self):
        command = np.dtype('uint16').type(self._CMD_PUMP_DEACTIVATE)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_reset(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_RESET)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_home(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_HOME)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_move_to(self, new_position):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_MOVE_TO)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(new_position, )],
                               dtype=[('new_position', 'float32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_move(self, distance, RPM, direction):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_MOVE)
        ARG_STRUCT_SIZE = 9
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(distance, RPM, direction, )],
                               dtype=[('distance', 'float32'), ('RPM', 'int32'), ('direction', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='float32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_set_position(self, position):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_SET_POSITION)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(position, )],
                               dtype=[('position', 'float32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_set_RPM(self, RPM):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_SET_RPM)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(RPM, )],
                               dtype=[('RPM', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_enable_motor(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENABLE_MOTOR)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_disable_motor(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_DISABLE_MOTOR)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_enable_micro_stepping(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENABLE_MICRO_STEPPING)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_disable_micro_stepping(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_DISABLE_MICRO_STEPPING)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_enable_engaged_stop(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENABLE_ENGAGED_STOP)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_disable_engaged_stop(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_DISABLE_ENGAGED_STOP)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_enable_home_stop(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENABLE_HOME_STOP)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_disable_home_stop(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_DISABLE_HOME_STOP)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def _zstage_position(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_POSITION)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='float32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_motor_enabled(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_MOTOR_ENABLED)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_micro_stepping(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_MICRO_STEPPING)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_RPM(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_RPM)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_home_stop_enabled(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_HOME_STOP_ENABLED)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_engaged_stop_enabled(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENGAGED_STOP_ENABLED)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_at_home(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_AT_HOME)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def _zstage_engaged(self):
        command = np.dtype('uint16').type(self._CMD__ZSTAGE_ENGAGED)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_begin(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_BEGIN)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_end(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_END)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_selfCal(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SELFCAL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_sysOffsetCal(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SYSOFFSETCAL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_sysGainCal(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SYSGAINCAL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setRate(self, rate):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETRATE)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(rate, )],
                               dtype=[('rate', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_readReg8(self, reg):
        command = np.dtype('uint16').type(self._CMD_MAX11210_READREG8)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(reg, )],
                               dtype=[('reg', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_readReg24(self, reg):
        command = np.dtype('uint16').type(self._CMD_MAX11210_READREG24)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(reg, )],
                               dtype=[('reg', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_writeReg8(self, reg, data):
        command = np.dtype('uint16').type(self._CMD_MAX11210_WRITEREG8)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(reg, data, )],
                               dtype=[('reg', 'uint8'), ('data', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_writeReg24(self, reg, data):
        command = np.dtype('uint16').type(self._CMD_MAX11210_WRITEREG24)
        ARG_STRUCT_SIZE = 5
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(reg, data, )],
                               dtype=[('reg', 'uint8'), ('data', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_send_command(self, cmd):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SEND_COMMAND)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(cmd, )],
                               dtype=[('cmd', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_getData(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETDATA)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getSTAT1(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETSTAT1)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getCTRL1(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETCTRL1)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getCTRL2(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETCTRL2)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getCTRL3(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETCTRL3)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setDefault(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETDEFAULT)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setLineFreq(self, frequency):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETLINEFREQ)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(frequency, )],
                               dtype=[('frequency', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setInputRange(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETINPUTRANGE)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setClockSource(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETCLOCKSOURCE)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setEnableRefBuf(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETENABLEREFBUF)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setEnableSigBuf(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETENABLESIGBUF)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setFormat(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETFORMAT)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setConvMode(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETCONVMODE)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_pinModeGpio(self, pin, mode):
        command = np.dtype('uint16').type(self._CMD_MAX11210_PINMODEGPIO)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, mode, )],
                               dtype=[('pin', 'uint8'), ('mode', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_digitalWriteGpio(self, pin, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_DIGITALWRITEGPIO)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, value, )],
                               dtype=[('pin', 'uint8'), ('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_digitalReadGpio(self, pin):
        command = np.dtype('uint16').type(self._CMD_MAX11210_DIGITALREADGPIO)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setGain(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETGAIN)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setDisableSysGain(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETDISABLESYSGAIN)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setDisableSysOffset(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETDISABLESYSOFFSET)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setDisableSelfCalGain(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETDISABLESELFCALGAIN)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setDisableSelfCalOffset(self, state):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETDISABLESELFCALOFFSET)
        ARG_STRUCT_SIZE = 1
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(state, )],
                               dtype=[('state', 'uint8'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_getSysGainCal(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETSYSGAINCAL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getSysOffsetCal(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETSYSOFFSETCAL)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getSelfCalGain(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETSELFCALGAIN)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_getSelfCalOffset(self):
        command = np.dtype('uint16').type(self._CMD_MAX11210_GETSELFCALOFFSET)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint32')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def MAX11210_setSysGainCal(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETSYSGAINCAL)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setSysOffsetCal(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETSYSOFFSETCAL)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setSelfCalGain(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETSELFCALGAIN)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def MAX11210_setSelfCalOffset(self, value):
        command = np.dtype('uint16').type(self._CMD_MAX11210_SETSELFCALOFFSET)
        ARG_STRUCT_SIZE = 4
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(value, )],
                               dtype=[('value', 'uint32'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def get_buffer(self):
        command = np.dtype('uint16').type(self._CMD_GET_BUFFER)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def begin(self):
        command = np.dtype('uint16').type(self._CMD_BEGIN)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def hardware_version(self):
        command = np.dtype('uint16').type(self._CMD_HARDWARE_VERSION)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is an array, so return entire array.
        return result


    def set_id(self, id):
        command = np.dtype('uint16').type(self._CMD_SET_ID)
        ARG_STRUCT_SIZE = 6

        id = _translate(id)
        if isinstance(id, str):
            id = map(ord, id)
        # Argument is an array, so cast to appropriate array type.
        id = np.ascontiguousarray(id, dtype='uint8')
        array_info = pd.DataFrame([id.shape[0], ],
                                  index=['id', ],
                                  columns=['length'])
        array_info['start'] = array_info.length.cumsum() - array_info.length
        array_data = ''.join([id.tostring(), ])
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(array_info.length['id'], ARG_STRUCT_SIZE + array_info.start['id'], )],
                               dtype=[('id_length', 'uint32'), ('id_data', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint8')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def on_tick(self):
        command = np.dtype('uint16').type(self._CMD_ON_TICK)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def loop(self):
        command = np.dtype('uint16').type(self._CMD_LOOP)
        payload_size = 0
        payload_data = ''

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)


    def analog_input_to_digital_pin(self, pin):
        command = np.dtype('uint16').type(self._CMD_ANALOG_INPUT_TO_DIGITAL_PIN)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint16')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def digital_pin_has_pwm(self, pin):
        command = np.dtype('uint16').type(self._CMD_DIGITAL_PIN_HAS_PWM)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint16')

        # Return type is a scalar, so return first entry in array.
        return result[0]


    def digital_pin_to_interrupt(self, pin):
        command = np.dtype('uint16').type(self._CMD_DIGITAL_PIN_TO_INTERRUPT)
        ARG_STRUCT_SIZE = 2
        array_data = ''
        payload_size = ARG_STRUCT_SIZE + len(array_data)
        struct_data = np.array([(pin, )],
                               dtype=[('pin', 'uint16'), ])
        payload_data = struct_data.tostring() + array_data

        payload_data = command.tostring() + payload_data
        packet = cPacket(data=payload_data, type_=PACKET_TYPES.DATA)
        response = self._send_command(packet)

        result = np.fromstring(response.data(), dtype='uint16')

        # Return type is a scalar, so return first entry in array.
        return result[0]







class I2cProxy(I2cProxyMixin, Proxy):
    pass


class SerialProxy(SerialProxyMixin, Proxy):
    pass


